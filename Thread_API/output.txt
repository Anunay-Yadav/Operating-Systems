
app:     file format elf32-i386
app
architecture: i386, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x0000069f

Program Header:
    PHDR off    0x00000034 vaddr 0x00000034 paddr 0x00000034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r--
  INTERP off    0x00000154 vaddr 0x00000154 paddr 0x00000154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000013c0 memsz 0x000013c0 flags r-x
    LOAD off    0x00001ec4 vaddr 0x00002ec4 paddr 0x00002ec4 align 2**12
         filesz 0x00000150 memsz 0x00000174 flags rw-
 DYNAMIC off    0x00001ecc vaddr 0x00002ecc paddr 0x00002ecc align 2**2
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    NOTE off    0x00000168 vaddr 0x00000168 paddr 0x00000168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x00000fbc vaddr 0x00000fbc paddr 0x00000fbc align 2**2
         filesz 0x00000074 memsz 0x00000074 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
   RELRO off    0x00001ec4 vaddr 0x00002ec4 paddr 0x00002ec4 align 2**0
         filesz 0x0000013c memsz 0x0000013c flags r--

Dynamic Section:
  NEEDED               libc.so.6
  INIT                 0x0000046c
  FINI                 0x00000e84
  INIT_ARRAY           0x00002ec4
  INIT_ARRAYSZ         0x00000004
  FINI_ARRAY           0x00002ec8
  FINI_ARRAYSZ         0x00000004
  GNU_HASH             0x000001ac
  STRTAB               0x0000029c
  SYMTAB               0x000001cc
  STRSZ                0x000000eb
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x00002fc4
  PLTRELSZ             0x00000038
  PLTREL               0x00000011
  JMPREL               0x00000434
  REL                  0x000003f4
  RELSZ                0x00000040
  RELENT               0x00000008
  FLAGS                0x00000008
  FLAGS_1              0x08000001
  VERNEED              0x000003a4
  VERNEEDNUM           0x00000001
  VERSYM               0x00000388
  RELCOUNT             0x00000004

Version References:
  required from libc.so.6:
    0x09691974 0x00 05 GLIBC_2.3.4
    0x0d696910 0x00 04 GLIBC_2.0
    0x09691f73 0x00 03 GLIBC_2.1.3
    0x0d696914 0x00 02 GLIBC_2.4

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  00000154  00000154  00000154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00000168  00000168  00000168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00000188  00000188  00000188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     00000020  000001ac  000001ac  000001ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       000000d0  000001cc  000001cc  000001cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000000eb  0000029c  0000029c  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000001a  00000388  00000388  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000050  000003a4  000003a4  000003a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000040  000003f4  000003f4  000003f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000038  00000434  00000434  00000434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000023  0000046c  0000046c  0000046c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000080  00000490  00000490  00000490  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000010  00000510  00000510  00000510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000964  00000520  00000520  00000520  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000014  00000e84  00000e84  00000e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000121  00000e98  00000e98  00000e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 00000074  00000fbc  00000fbc  00000fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     00000390  00001030  00001030  00001030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  00002ec4  00002ec4  00001ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  00002ec8  00002ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      000000f8  00002ecc  00002ecc  00001ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          0000003c  00002fc4  00002fc4  00001fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         00000014  00003000  00003000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000020  00003018  00003018  00002014  2**3
                  ALLOC
 24 .comment      00000029  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 25 .debug_aranges 00000048  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   00001103  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 000004e6  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_line   0000042d  00000000  00000000  0000366e  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00000410  00000000  00000000  00003a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_loc    00000526  00000000  00000000  00003eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_ranges 00000258  00000000  00000000  000043d1  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000154 l    d  .interp	00000000              .interp
00000168 l    d  .note.ABI-tag	00000000              .note.ABI-tag
00000188 l    d  .note.gnu.build-id	00000000              .note.gnu.build-id
000001ac l    d  .gnu.hash	00000000              .gnu.hash
000001cc l    d  .dynsym	00000000              .dynsym
0000029c l    d  .dynstr	00000000              .dynstr
00000388 l    d  .gnu.version	00000000              .gnu.version
000003a4 l    d  .gnu.version_r	00000000              .gnu.version_r
000003f4 l    d  .rel.dyn	00000000              .rel.dyn
00000434 l    d  .rel.plt	00000000              .rel.plt
0000046c l    d  .init	00000000              .init
00000490 l    d  .plt	00000000              .plt
00000510 l    d  .plt.got	00000000              .plt.got
00000520 l    d  .text	00000000              .text
00000e84 l    d  .fini	00000000              .fini
00000e98 l    d  .rodata	00000000              .rodata
00000fbc l    d  .eh_frame_hdr	00000000              .eh_frame_hdr
00001030 l    d  .eh_frame	00000000              .eh_frame
00002ec4 l    d  .init_array	00000000              .init_array
00002ec8 l    d  .fini_array	00000000              .fini_array
00002ecc l    d  .dynamic	00000000              .dynamic
00002fc4 l    d  .got	00000000              .got
00003000 l    d  .data	00000000              .data
00003018 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    d  .debug_aranges	00000000              .debug_aranges
00000000 l    d  .debug_info	00000000              .debug_info
00000000 l    d  .debug_abbrev	00000000              .debug_abbrev
00000000 l    d  .debug_line	00000000              .debug_line
00000000 l    d  .debug_str	00000000              .debug_str
00000000 l    d  .debug_loc	00000000              .debug_loc
00000000 l    d  .debug_ranges	00000000              .debug_ranges
00000000 l    df *ABS*	00000000              app.c
00000fb4 l     O .rodata	00000005              __PRETTY_FUNCTION__.2753
00000000 l    df *ABS*	00000000              crtstuff.c
000006f0 l     F .text	00000000              deregister_tm_clones
00000730 l     F .text	00000000              register_tm_clones
00000780 l     F .text	00000000              __do_global_dtors_aux
00003018 l     O .bss	00000001              completed.7283
00002ec8 l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
000007d0 l     F .text	00000000              frame_dummy
00002ec4 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              thread.c
00000ee4 l     O .rodata	0000000a              __PRETTY_FUNCTION__.2744
00000000 l    df *ABS*	00000000              crtstuff.c
000013bc l     O .eh_frame	00000000              __FRAME_END__
00000000 l    df *ABS*	00000000              
00002ec8 l       .init_array	00000000              __init_array_end
00002ecc l     O .dynamic	00000000              _DYNAMIC
00002ec4 l       .init_array	00000000              __init_array_start
00000fbc l       .eh_frame_hdr	00000000              __GNU_EH_FRAME_HDR
00002fc4 l     O .got	00000000              _GLOBAL_OFFSET_TABLE_
0000301c g     O .bss	00000004              cur_thread
00000e60 g     F .text	00000002              __libc_csu_fini
00000d70 g     F .text	0000003c              bar2
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
000006e0 g     F .text	00000004              .hidden __x86.get_pc_thunk.bx
00003000  w      .data	00000000              data_start
00003014 g       .data	00000000              _edata
000009b0 g     F .text	000000ab              thread_exit
00000e84 g     F .fini	00000000              _fini
00000000       F *UND*	00000000              __stack_chk_fail@@GLIBC_2.4
000007d9 g     F .text	00000000              .hidden __x86.get_pc_thunk.dx
00000000  w    F *UND*	00000000              __cxa_finalize@@GLIBC_2.1.3
00000850 g     F .text	00000155              thread_yield
00000000       F *UND*	00000000              malloc@@GLIBC_2.0
00003000 g       .data	00000000              __data_start
00000000       F *UND*	00000000              puts@@GLIBC_2.0
00000000  w      *UND*	00000000              __gmon_start__
00003004 g     O .data	00000000              .hidden __dso_handle
00003030 g     O .bss	00000008              sum
00000e9c g     O .rodata	00000004              _IO_stdin_used
00000db0 g     F .text	0000004e              bar1
00000000       F *UND*	00000000              __libc_start_main@@GLIBC_2.0
00000e00 g     F .text	0000005d              __libc_csu_init
00000a60 g     F .text	000001a2              wait_for_all
00000c20 g     F .text	00000149              foo
00000c02 g       .text	00000000              context_switch
00003038 g       .bss	00000000              _end
0000069f g     F .text	00000000              _start
00003008 g     O .data	00000008              counter
00000e98 g     O .rodata	00000004              _fp_hw
00003014 g       .bss	00000000              __bss_start
00000520 g     F .text	0000017f              main
00000000       F *UND*	00000000              __printf_chk@@GLIBC_2.3.4
00003020 g     O .bss	00000004              ready_list
00003028 g     O .bss	00000004              test2
00000e70 g     F .text	00000014              .hidden __stack_chk_fail_local
00003014 g     O .data	00000000              .hidden __TMC_END__
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
000007e0 g     F .text	00000064              create_thread
00000000       F *UND*	00000000              strtol@@GLIBC_2.0
0000046c g     F .init	00000000              _init
00003010 g     O .data	00000004              num_threads
00000000       F *UND*	00000000              __assert_fail@@GLIBC_2.0



Disassembly of section .init:

0000046c <_init>:
 46c:	53                   	push   %ebx
 46d:	83 ec 08             	sub    $0x8,%esp
 470:	e8 6b 02 00 00       	call   6e0 <__x86.get_pc_thunk.bx>
 475:	81 c3 4f 2b 00 00    	add    $0x2b4f,%ebx
 47b:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
 481:	85 c0                	test   %eax,%eax
 483:	74 05                	je     48a <_init+0x1e>
 485:	e8 8e 00 00 00       	call   518 <__gmon_start__@plt>
 48a:	83 c4 08             	add    $0x8,%esp
 48d:	5b                   	pop    %ebx
 48e:	c3                   	ret    

Disassembly of section .plt:

00000490 <.plt>:
 490:	ff b3 04 00 00 00    	pushl  0x4(%ebx)
 496:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
 49c:	00 00                	add    %al,(%eax)
	...

000004a0 <__stack_chk_fail@plt>:
 4a0:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
 4a6:	68 00 00 00 00       	push   $0x0
 4ab:	e9 e0 ff ff ff       	jmp    490 <.plt>

000004b0 <malloc@plt>:
 4b0:	ff a3 10 00 00 00    	jmp    *0x10(%ebx)
 4b6:	68 08 00 00 00       	push   $0x8
 4bb:	e9 d0 ff ff ff       	jmp    490 <.plt>

000004c0 <puts@plt>:
 4c0:	ff a3 14 00 00 00    	jmp    *0x14(%ebx)
 4c6:	68 10 00 00 00       	push   $0x10
 4cb:	e9 c0 ff ff ff       	jmp    490 <.plt>

000004d0 <__libc_start_main@plt>:
 4d0:	ff a3 18 00 00 00    	jmp    *0x18(%ebx)
 4d6:	68 18 00 00 00       	push   $0x18
 4db:	e9 b0 ff ff ff       	jmp    490 <.plt>

000004e0 <__printf_chk@plt>:
 4e0:	ff a3 1c 00 00 00    	jmp    *0x1c(%ebx)
 4e6:	68 20 00 00 00       	push   $0x20
 4eb:	e9 a0 ff ff ff       	jmp    490 <.plt>

000004f0 <strtol@plt>:
 4f0:	ff a3 20 00 00 00    	jmp    *0x20(%ebx)
 4f6:	68 28 00 00 00       	push   $0x28
 4fb:	e9 90 ff ff ff       	jmp    490 <.plt>

00000500 <__assert_fail@plt>:
 500:	ff a3 24 00 00 00    	jmp    *0x24(%ebx)
 506:	68 30 00 00 00       	push   $0x30
 50b:	e9 80 ff ff ff       	jmp    490 <.plt>

Disassembly of section .plt.got:

00000510 <__cxa_finalize@plt>:
 510:	ff a3 2c 00 00 00    	jmp    *0x2c(%ebx)
 516:	66 90                	xchg   %ax,%ax

00000518 <__gmon_start__@plt>:
 518:	ff a3 30 00 00 00    	jmp    *0x30(%ebx)
 51e:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000520 <main>:
 520:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 524:	83 e4 f0             	and    $0xfffffff0,%esp
 527:	ff 71 fc             	pushl  -0x4(%ecx)
 52a:	55                   	push   %ebp
 52b:	89 e5                	mov    %esp,%ebp
 52d:	57                   	push   %edi
 52e:	56                   	push   %esi
 52f:	53                   	push   %ebx
 530:	51                   	push   %ecx
 531:	e8 aa 01 00 00       	call   6e0 <__x86.get_pc_thunk.bx>
 536:	81 c3 8e 2a 00 00    	add    $0x2a8e,%ebx
 53c:	81 ec 28 10 00 00    	sub    $0x1028,%esp
 542:	8b 31                	mov    (%ecx),%esi
 544:	8b 41 04             	mov    0x4(%ecx),%eax
 547:	65 8b 15 14 00 00 00 	mov    %gs:0x14,%edx
 54e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 551:	31 d2                	xor    %edx,%edx
 553:	83 fe 01             	cmp    $0x1,%esi
 556:	0f 8f d2 00 00 00    	jg     62e <main+0x10e>
 55c:	8d 83 80 df ff ff    	lea    -0x2080(%ebx),%eax
 562:	83 ec 04             	sub    $0x4,%esp
 565:	ff b3 4c 00 00 00    	pushl  0x4c(%ebx)
 56b:	50                   	push   %eax
 56c:	6a 01                	push   $0x1
 56e:	e8 6d ff ff ff       	call   4e0 <__printf_chk@plt>
 573:	8b bb 64 00 00 00    	mov    0x64(%ebx),%edi
 579:	83 c4 10             	add    $0x10,%esp
 57c:	85 ff                	test   %edi,%edi
 57e:	0f 85 e2 00 00 00    	jne    666 <main+0x146>
 584:	8b b3 4c 00 00 00    	mov    0x4c(%ebx),%esi
 58a:	85 f6                	test   %esi,%esi
 58c:	7e 55                	jle    5e3 <main+0xc3>
 58e:	8d 83 e6 df ff ff    	lea    -0x201a(%ebx),%eax
 594:	8d b5 e4 ef ff ff    	lea    -0x101c(%ebp),%esi
 59a:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
 5a0:	8d 83 5c dc ff ff    	lea    -0x23a4(%ebx),%eax
 5a6:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
 5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 5b0:	83 ec 04             	sub    $0x4,%esp
 5b3:	89 3c be             	mov    %edi,(%esi,%edi,4)
 5b6:	57                   	push   %edi
 5b7:	ff b5 d4 ef ff ff    	pushl  -0x102c(%ebp)
 5bd:	6a 01                	push   $0x1
 5bf:	e8 1c ff ff ff       	call   4e0 <__printf_chk@plt>
 5c4:	5a                   	pop    %edx
 5c5:	8d 04 be             	lea    (%esi,%edi,4),%eax
 5c8:	83 c7 01             	add    $0x1,%edi
 5cb:	59                   	pop    %ecx
 5cc:	50                   	push   %eax
 5cd:	ff b5 d0 ef ff ff    	pushl  -0x1030(%ebp)
 5d3:	e8 08 02 00 00       	call   7e0 <create_thread>
 5d8:	83 c4 10             	add    $0x10,%esp
 5db:	39 bb 4c 00 00 00    	cmp    %edi,0x4c(%ebx)
 5e1:	7f cd                	jg     5b0 <main+0x90>
 5e3:	8d 83 e3 de ff ff    	lea    -0x211d(%ebx),%eax
 5e9:	83 ec 0c             	sub    $0xc,%esp
 5ec:	50                   	push   %eax
 5ed:	e8 ce fe ff ff       	call   4c0 <puts@plt>
 5f2:	e8 69 04 00 00       	call   a60 <wait_for_all>
 5f7:	8d 83 a8 df ff ff    	lea    -0x2058(%ebx),%eax
 5fd:	ff b3 70 00 00 00    	pushl  0x70(%ebx)
 603:	ff b3 6c 00 00 00    	pushl  0x6c(%ebx)
 609:	50                   	push   %eax
 60a:	6a 01                	push   $0x1
 60c:	e8 cf fe ff ff       	call   4e0 <__printf_chk@plt>
 611:	83 c4 20             	add    $0x20,%esp
 614:	31 c0                	xor    %eax,%eax
 616:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 619:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 620:	75 5c                	jne    67e <main+0x15e>
 622:	8d 65 f0             	lea    -0x10(%ebp),%esp
 625:	59                   	pop    %ecx
 626:	5b                   	pop    %ebx
 627:	5e                   	pop    %esi
 628:	5f                   	pop    %edi
 629:	5d                   	pop    %ebp
 62a:	8d 61 fc             	lea    -0x4(%ecx),%esp
 62d:	c3                   	ret    
 62e:	57                   	push   %edi
 62f:	6a 0a                	push   $0xa
 631:	6a 00                	push   $0x0
 633:	ff 70 04             	pushl  0x4(%eax)
 636:	e8 b5 fe ff ff       	call   4f0 <strtol@plt>
 63b:	89 83 4c 00 00 00    	mov    %eax,0x4c(%ebx)
 641:	83 e8 01             	sub    $0x1,%eax
 644:	83 c4 10             	add    $0x10,%esp
 647:	3d ff 03 00 00       	cmp    $0x3ff,%eax
 64c:	77 35                	ja     683 <main+0x163>
 64e:	83 fe 02             	cmp    $0x2,%esi
 651:	0f 84 05 ff ff ff    	je     55c <main+0x3c>
 657:	c7 83 64 00 00 00 01 	movl   $0x1,0x64(%ebx)
 65e:	00 00 00 
 661:	e9 f6 fe ff ff       	jmp    55c <main+0x3c>
 666:	50                   	push   %eax
 667:	50                   	push   %eax
 668:	8d 83 ec dd ff ff    	lea    -0x2214(%ebx),%eax
 66e:	6a 00                	push   $0x0
 670:	50                   	push   %eax
 671:	e8 6a 01 00 00       	call   7e0 <create_thread>
 676:	83 c4 10             	add    $0x10,%esp
 679:	e9 65 ff ff ff       	jmp    5e3 <main+0xc3>
 67e:	e8 ed 07 00 00       	call   e70 <__stack_chk_fail_local>
 683:	8d 83 f0 df ff ff    	lea    -0x2010(%ebx),%eax
 689:	50                   	push   %eax
 68a:	8d 83 e0 df ff ff    	lea    -0x2020(%ebx),%eax
 690:	6a 36                	push   $0x36
 692:	50                   	push   %eax
 693:	8d 83 50 df ff ff    	lea    -0x20b0(%ebx),%eax
 699:	50                   	push   %eax
 69a:	e8 61 fe ff ff       	call   500 <__assert_fail@plt>

0000069f <_start>:
 69f:	31 ed                	xor    %ebp,%ebp
 6a1:	5e                   	pop    %esi
 6a2:	89 e1                	mov    %esp,%ecx
 6a4:	83 e4 f0             	and    $0xfffffff0,%esp
 6a7:	50                   	push   %eax
 6a8:	54                   	push   %esp
 6a9:	52                   	push   %edx
 6aa:	e8 22 00 00 00       	call   6d1 <_start+0x32>
 6af:	81 c3 15 29 00 00    	add    $0x2915,%ebx
 6b5:	8d 83 9c de ff ff    	lea    -0x2164(%ebx),%eax
 6bb:	50                   	push   %eax
 6bc:	8d 83 3c de ff ff    	lea    -0x21c4(%ebx),%eax
 6c2:	50                   	push   %eax
 6c3:	51                   	push   %ecx
 6c4:	56                   	push   %esi
 6c5:	ff b3 34 00 00 00    	pushl  0x34(%ebx)
 6cb:	e8 00 fe ff ff       	call   4d0 <__libc_start_main@plt>
 6d0:	f4                   	hlt    
 6d1:	8b 1c 24             	mov    (%esp),%ebx
 6d4:	c3                   	ret    
 6d5:	66 90                	xchg   %ax,%ax
 6d7:	66 90                	xchg   %ax,%ax
 6d9:	66 90                	xchg   %ax,%ax
 6db:	66 90                	xchg   %ax,%ax
 6dd:	66 90                	xchg   %ax,%ax
 6df:	90                   	nop

000006e0 <__x86.get_pc_thunk.bx>:
 6e0:	8b 1c 24             	mov    (%esp),%ebx
 6e3:	c3                   	ret    
 6e4:	66 90                	xchg   %ax,%ax
 6e6:	66 90                	xchg   %ax,%ax
 6e8:	66 90                	xchg   %ax,%ax
 6ea:	66 90                	xchg   %ax,%ax
 6ec:	66 90                	xchg   %ax,%ax
 6ee:	66 90                	xchg   %ax,%ax

000006f0 <deregister_tm_clones>:
 6f0:	e8 e4 00 00 00       	call   7d9 <__x86.get_pc_thunk.dx>
 6f5:	81 c2 cf 28 00 00    	add    $0x28cf,%edx
 6fb:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
 701:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
 707:	39 c8                	cmp    %ecx,%eax
 709:	74 1d                	je     728 <deregister_tm_clones+0x38>
 70b:	8b 82 28 00 00 00    	mov    0x28(%edx),%eax
 711:	85 c0                	test   %eax,%eax
 713:	74 13                	je     728 <deregister_tm_clones+0x38>
 715:	55                   	push   %ebp
 716:	89 e5                	mov    %esp,%ebp
 718:	83 ec 14             	sub    $0x14,%esp
 71b:	51                   	push   %ecx
 71c:	ff d0                	call   *%eax
 71e:	83 c4 10             	add    $0x10,%esp
 721:	c9                   	leave  
 722:	c3                   	ret    
 723:	90                   	nop
 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 728:	f3 c3                	repz ret 
 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

00000730 <register_tm_clones>:
 730:	e8 a4 00 00 00       	call   7d9 <__x86.get_pc_thunk.dx>
 735:	81 c2 8f 28 00 00    	add    $0x288f,%edx
 73b:	55                   	push   %ebp
 73c:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
 742:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
 748:	29 c8                	sub    %ecx,%eax
 74a:	89 e5                	mov    %esp,%ebp
 74c:	53                   	push   %ebx
 74d:	c1 f8 02             	sar    $0x2,%eax
 750:	89 c3                	mov    %eax,%ebx
 752:	83 ec 04             	sub    $0x4,%esp
 755:	c1 eb 1f             	shr    $0x1f,%ebx
 758:	01 d8                	add    %ebx,%eax
 75a:	d1 f8                	sar    %eax
 75c:	74 14                	je     772 <register_tm_clones+0x42>
 75e:	8b 92 38 00 00 00    	mov    0x38(%edx),%edx
 764:	85 d2                	test   %edx,%edx
 766:	74 0a                	je     772 <register_tm_clones+0x42>
 768:	83 ec 08             	sub    $0x8,%esp
 76b:	50                   	push   %eax
 76c:	51                   	push   %ecx
 76d:	ff d2                	call   *%edx
 76f:	83 c4 10             	add    $0x10,%esp
 772:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 775:	c9                   	leave  
 776:	c3                   	ret    
 777:	89 f6                	mov    %esi,%esi
 779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00000780 <__do_global_dtors_aux>:
 780:	55                   	push   %ebp
 781:	89 e5                	mov    %esp,%ebp
 783:	53                   	push   %ebx
 784:	e8 57 ff ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 789:	81 c3 3b 28 00 00    	add    $0x283b,%ebx
 78f:	83 ec 04             	sub    $0x4,%esp
 792:	80 bb 54 00 00 00 00 	cmpb   $0x0,0x54(%ebx)
 799:	75 27                	jne    7c2 <__do_global_dtors_aux+0x42>
 79b:	8b 83 2c 00 00 00    	mov    0x2c(%ebx),%eax
 7a1:	85 c0                	test   %eax,%eax
 7a3:	74 11                	je     7b6 <__do_global_dtors_aux+0x36>
 7a5:	83 ec 0c             	sub    $0xc,%esp
 7a8:	ff b3 40 00 00 00    	pushl  0x40(%ebx)
 7ae:	e8 5d fd ff ff       	call   510 <__cxa_finalize@plt>
 7b3:	83 c4 10             	add    $0x10,%esp
 7b6:	e8 35 ff ff ff       	call   6f0 <deregister_tm_clones>
 7bb:	c6 83 54 00 00 00 01 	movb   $0x1,0x54(%ebx)
 7c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 7c5:	c9                   	leave  
 7c6:	c3                   	ret    
 7c7:	89 f6                	mov    %esi,%esi
 7c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000007d0 <frame_dummy>:
 7d0:	55                   	push   %ebp
 7d1:	89 e5                	mov    %esp,%ebp
 7d3:	5d                   	pop    %ebp
 7d4:	e9 57 ff ff ff       	jmp    730 <register_tm_clones>

000007d9 <__x86.get_pc_thunk.dx>:
 7d9:	8b 14 24             	mov    (%esp),%edx
 7dc:	c3                   	ret    
 7dd:	66 90                	xchg   %ax,%ax
 7df:	90                   	nop

000007e0 <create_thread>:
 7e0:	56                   	push   %esi
 7e1:	53                   	push   %ebx
 7e2:	e8 f9 fe ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 7e7:	81 c3 dd 27 00 00    	add    $0x27dd,%ebx
 7ed:	83 ec 10             	sub    $0x10,%esp
 7f0:	6a 0c                	push   $0xc
 7f2:	e8 b9 fc ff ff       	call   4b0 <malloc@plt>
 7f7:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
 7fe:	89 c6                	mov    %eax,%esi
 800:	e8 ab fc ff ff       	call   4b0 <malloc@plt>
 805:	8b 93 5c 00 00 00    	mov    0x5c(%ebx),%edx
 80b:	83 c4 10             	add    $0x10,%esp
 80e:	89 06                	mov    %eax,(%esi)
 810:	85 d2                	test   %edx,%edx
 812:	75 0e                	jne    822 <create_thread+0x42>
 814:	eb 22                	jmp    838 <create_thread+0x58>
 816:	8d 76 00             	lea    0x0(%esi),%esi
 819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 820:	89 c2                	mov    %eax,%edx
 822:	8b 42 04             	mov    0x4(%edx),%eax
 825:	85 c0                	test   %eax,%eax
 827:	75 f7                	jne    820 <create_thread+0x40>
 829:	89 72 04             	mov    %esi,0x4(%edx)
 82c:	89 56 08             	mov    %edx,0x8(%esi)
 82f:	83 c4 04             	add    $0x4,%esp
 832:	5b                   	pop    %ebx
 833:	5e                   	pop    %esi
 834:	c3                   	ret    
 835:	8d 76 00             	lea    0x0(%esi),%esi
 838:	89 b3 5c 00 00 00    	mov    %esi,0x5c(%ebx)
 83e:	83 c4 04             	add    $0x4,%esp
 841:	5b                   	pop    %ebx
 842:	5e                   	pop    %esi
 843:	c3                   	ret    
 844:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 84a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

00000850 <thread_yield>:
 850:	57                   	push   %edi
 851:	56                   	push   %esi
 852:	53                   	push   %ebx
 853:	e8 88 fe ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 858:	81 c3 6c 27 00 00    	add    $0x276c,%ebx
 85e:	8b b3 58 00 00 00    	mov    0x58(%ebx),%esi
 864:	85 f6                	test   %esi,%esi
 866:	0f 84 f4 00 00 00    	je     960 <thread_yield+0x110>
 86c:	8d 83 e7 de ff ff    	lea    -0x2119(%ebx),%eax
 872:	83 ec 0c             	sub    $0xc,%esp
 875:	50                   	push   %eax
 876:	e8 45 fc ff ff       	call   4c0 <puts@plt>
 87b:	8b 93 5c 00 00 00    	mov    0x5c(%ebx),%edx
 881:	83 c4 10             	add    $0x10,%esp
 884:	8b 8b 58 00 00 00    	mov    0x58(%ebx),%ecx
 88a:	85 d2                	test   %edx,%edx
 88c:	75 0c                	jne    89a <thread_yield+0x4a>
 88e:	e9 bd 00 00 00       	jmp    950 <thread_yield+0x100>
 893:	90                   	nop
 894:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 898:	89 c2                	mov    %eax,%edx
 89a:	8b 42 04             	mov    0x4(%edx),%eax
 89d:	85 c0                	test   %eax,%eax
 89f:	75 f7                	jne    898 <thread_yield+0x48>
 8a1:	89 4a 04             	mov    %ecx,0x4(%edx)
 8a4:	89 51 08             	mov    %edx,0x8(%ecx)
 8a7:	8d 83 e9 de ff ff    	lea    -0x2117(%ebx),%eax
 8ad:	83 ec 0c             	sub    $0xc,%esp
 8b0:	50                   	push   %eax
 8b1:	e8 0a fc ff ff       	call   4c0 <puts@plt>
 8b6:	8b 8b 5c 00 00 00    	mov    0x5c(%ebx),%ecx
 8bc:	83 c4 10             	add    $0x10,%esp
 8bf:	85 c9                	test   %ecx,%ecx
 8c1:	74 77                	je     93a <thread_yield+0xea>
 8c3:	8d 83 f0 de ff ff    	lea    -0x2110(%ebx),%eax
 8c9:	83 ec 0c             	sub    $0xc,%esp
 8cc:	50                   	push   %eax
 8cd:	e8 ee fb ff ff       	call   4c0 <puts@plt>
 8d2:	8b b3 5c 00 00 00    	mov    0x5c(%ebx),%esi
 8d8:	83 c4 10             	add    $0x10,%esp
 8db:	8b bb 58 00 00 00    	mov    0x58(%ebx),%edi
 8e1:	85 f6                	test   %esi,%esi
 8e3:	0f 84 a0 00 00 00    	je     989 <thread_yield+0x139>
 8e9:	8b 46 04             	mov    0x4(%esi),%eax
 8ec:	c7 46 08 00 00 00 00 	movl   $0x0,0x8(%esi)
 8f3:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%esi)
 8fa:	85 c0                	test   %eax,%eax
 8fc:	89 83 5c 00 00 00    	mov    %eax,0x5c(%ebx)
 902:	74 07                	je     90b <thread_yield+0xbb>
 904:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 90b:	8d 83 04 df ff ff    	lea    -0x20fc(%ebx),%eax
 911:	83 ec 0c             	sub    $0xc,%esp
 914:	89 b3 58 00 00 00    	mov    %esi,0x58(%ebx)
 91a:	50                   	push   %eax
 91b:	e8 a0 fb ff ff       	call   4c0 <puts@plt>
 920:	58                   	pop    %eax
 921:	5a                   	pop    %edx
 922:	56                   	push   %esi
 923:	57                   	push   %edi
 924:	e8 d9 02 00 00       	call   c02 <context_switch>
 929:	8d 83 0b df ff ff    	lea    -0x20f5(%ebx),%eax
 92f:	89 04 24             	mov    %eax,(%esp)
 932:	e8 89 fb ff ff       	call   4c0 <puts@plt>
 937:	83 c4 10             	add    $0x10,%esp
 93a:	8d 83 15 df ff ff    	lea    -0x20eb(%ebx),%eax
 940:	83 ec 0c             	sub    $0xc,%esp
 943:	50                   	push   %eax
 944:	e8 77 fb ff ff       	call   4c0 <puts@plt>
 949:	83 c4 10             	add    $0x10,%esp
 94c:	5b                   	pop    %ebx
 94d:	5e                   	pop    %esi
 94e:	5f                   	pop    %edi
 94f:	c3                   	ret    
 950:	89 8b 5c 00 00 00    	mov    %ecx,0x5c(%ebx)
 956:	e9 4c ff ff ff       	jmp    8a7 <thread_yield+0x57>
 95b:	90                   	nop
 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 960:	8d 83 dc de ff ff    	lea    -0x2124(%ebx),%eax
 966:	83 ec 0c             	sub    $0xc,%esp
 969:	50                   	push   %eax
 96a:	e8 51 fb ff ff       	call   4c0 <puts@plt>
 96f:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 976:	e8 35 fb ff ff       	call   4b0 <malloc@plt>
 97b:	83 c4 10             	add    $0x10,%esp
 97e:	89 83 58 00 00 00    	mov    %eax,0x58(%ebx)
 984:	e9 e3 fe ff ff       	jmp    86c <thread_yield+0x1c>
 989:	8d 83 20 df ff ff    	lea    -0x20e0(%ebx),%eax
 98f:	50                   	push   %eax
 990:	8d 83 f9 de ff ff    	lea    -0x2107(%ebx),%eax
 996:	6a 29                	push   $0x29
 998:	50                   	push   %eax
 999:	8d 83 02 df ff ff    	lea    -0x20fe(%ebx),%eax
 99f:	50                   	push   %eax
 9a0:	e8 5b fb ff ff       	call   500 <__assert_fail@plt>
 9a5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 9a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

000009b0 <thread_exit>:
 9b0:	57                   	push   %edi
 9b1:	56                   	push   %esi
 9b2:	53                   	push   %ebx
 9b3:	e8 28 fd ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 9b8:	81 c3 0c 26 00 00    	add    $0x260c,%ebx
 9be:	8b 8b 5c 00 00 00    	mov    0x5c(%ebx),%ecx
 9c4:	85 c9                	test   %ecx,%ecx
 9c6:	74 73                	je     a3b <thread_exit+0x8b>
 9c8:	8d 83 f0 de ff ff    	lea    -0x2110(%ebx),%eax
 9ce:	83 ec 0c             	sub    $0xc,%esp
 9d1:	50                   	push   %eax
 9d2:	e8 e9 fa ff ff       	call   4c0 <puts@plt>
 9d7:	8b b3 5c 00 00 00    	mov    0x5c(%ebx),%esi
 9dd:	83 c4 10             	add    $0x10,%esp
 9e0:	8b bb 58 00 00 00    	mov    0x58(%ebx),%edi
 9e6:	85 f6                	test   %esi,%esi
 9e8:	74 55                	je     a3f <thread_exit+0x8f>
 9ea:	8b 46 04             	mov    0x4(%esi),%eax
 9ed:	c7 46 08 00 00 00 00 	movl   $0x0,0x8(%esi)
 9f4:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%esi)
 9fb:	85 c0                	test   %eax,%eax
 9fd:	89 83 5c 00 00 00    	mov    %eax,0x5c(%ebx)
 a03:	74 07                	je     a0c <thread_exit+0x5c>
 a05:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 a0c:	8d 83 04 df ff ff    	lea    -0x20fc(%ebx),%eax
 a12:	83 ec 0c             	sub    $0xc,%esp
 a15:	89 b3 58 00 00 00    	mov    %esi,0x58(%ebx)
 a1b:	50                   	push   %eax
 a1c:	e8 9f fa ff ff       	call   4c0 <puts@plt>
 a21:	58                   	pop    %eax
 a22:	5a                   	pop    %edx
 a23:	56                   	push   %esi
 a24:	57                   	push   %edi
 a25:	e8 d8 01 00 00       	call   c02 <context_switch>
 a2a:	8d 83 0b df ff ff    	lea    -0x20f5(%ebx),%eax
 a30:	89 04 24             	mov    %eax,(%esp)
 a33:	e8 88 fa ff ff       	call   4c0 <puts@plt>
 a38:	83 c4 10             	add    $0x10,%esp
 a3b:	5b                   	pop    %ebx
 a3c:	5e                   	pop    %esi
 a3d:	5f                   	pop    %edi
 a3e:	c3                   	ret    
 a3f:	8d 83 20 df ff ff    	lea    -0x20e0(%ebx),%eax
 a45:	50                   	push   %eax
 a46:	8d 83 f9 de ff ff    	lea    -0x2107(%ebx),%eax
 a4c:	6a 29                	push   $0x29
 a4e:	50                   	push   %eax
 a4f:	8d 83 02 df ff ff    	lea    -0x20fe(%ebx),%eax
 a55:	50                   	push   %eax
 a56:	e8 a5 fa ff ff       	call   500 <__assert_fail@plt>
 a5b:	90                   	nop
 a5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00000a60 <wait_for_all>:
 a60:	55                   	push   %ebp
 a61:	57                   	push   %edi
 a62:	56                   	push   %esi
 a63:	53                   	push   %ebx
 a64:	e8 77 fc ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 a69:	81 c3 5b 25 00 00    	add    $0x255b,%ebx
 a6f:	83 ec 28             	sub    $0x28,%esp
 a72:	8d 83 e4 de ff ff    	lea    -0x211c(%ebx),%eax
 a78:	50                   	push   %eax
 a79:	e8 42 fa ff ff       	call   4c0 <puts@plt>
 a7e:	8b 83 5c 00 00 00    	mov    0x5c(%ebx),%eax
 a84:	83 c4 10             	add    $0x10,%esp
 a87:	85 c0                	test   %eax,%eax
 a89:	0f 84 12 01 00 00    	je     ba1 <wait_for_all+0x141>
 a8f:	8d 83 dc de ff ff    	lea    -0x2124(%ebx),%eax
 a95:	8d bb e7 de ff ff    	lea    -0x2119(%ebx),%edi
 a9b:	8d b3 e9 de ff ff    	lea    -0x2117(%ebx),%esi
 aa1:	89 44 24 0c          	mov    %eax,0xc(%esp)
 aa5:	8d 83 f0 de ff ff    	lea    -0x2110(%ebx),%eax
 aab:	89 44 24 08          	mov    %eax,0x8(%esp)
 aaf:	90                   	nop
 ab0:	8b 83 58 00 00 00    	mov    0x58(%ebx),%eax
 ab6:	85 c0                	test   %eax,%eax
 ab8:	0f 84 02 01 00 00    	je     bc0 <wait_for_all+0x160>
 abe:	83 ec 0c             	sub    $0xc,%esp
 ac1:	57                   	push   %edi
 ac2:	e8 f9 f9 ff ff       	call   4c0 <puts@plt>
 ac7:	8b 93 5c 00 00 00    	mov    0x5c(%ebx),%edx
 acd:	83 c4 10             	add    $0x10,%esp
 ad0:	8b 8b 58 00 00 00    	mov    0x58(%ebx),%ecx
 ad6:	85 d2                	test   %edx,%edx
 ad8:	75 08                	jne    ae2 <wait_for_all+0x82>
 ada:	e9 d1 00 00 00       	jmp    bb0 <wait_for_all+0x150>
 adf:	90                   	nop
 ae0:	89 c2                	mov    %eax,%edx
 ae2:	8b 42 04             	mov    0x4(%edx),%eax
 ae5:	85 c0                	test   %eax,%eax
 ae7:	75 f7                	jne    ae0 <wait_for_all+0x80>
 ae9:	89 4a 04             	mov    %ecx,0x4(%edx)
 aec:	89 51 08             	mov    %edx,0x8(%ecx)
 aef:	83 ec 0c             	sub    $0xc,%esp
 af2:	56                   	push   %esi
 af3:	e8 c8 f9 ff ff       	call   4c0 <puts@plt>
 af8:	8b ab 5c 00 00 00    	mov    0x5c(%ebx),%ebp
 afe:	83 c4 10             	add    $0x10,%esp
 b01:	85 ed                	test   %ebp,%ebp
 b03:	74 7c                	je     b81 <wait_for_all+0x121>
 b05:	83 ec 0c             	sub    $0xc,%esp
 b08:	ff 74 24 14          	pushl  0x14(%esp)
 b0c:	e8 af f9 ff ff       	call   4c0 <puts@plt>
 b11:	8b 93 5c 00 00 00    	mov    0x5c(%ebx),%edx
 b17:	83 c4 10             	add    $0x10,%esp
 b1a:	8b ab 58 00 00 00    	mov    0x58(%ebx),%ebp
 b20:	85 d2                	test   %edx,%edx
 b22:	0f 84 be 00 00 00    	je     be6 <wait_for_all+0x186>
 b28:	8b 42 04             	mov    0x4(%edx),%eax
 b2b:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
 b32:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
 b39:	85 c0                	test   %eax,%eax
 b3b:	89 83 5c 00 00 00    	mov    %eax,0x5c(%ebx)
 b41:	74 07                	je     b4a <wait_for_all+0xea>
 b43:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 b4a:	8d 83 04 df ff ff    	lea    -0x20fc(%ebx),%eax
 b50:	89 54 24 04          	mov    %edx,0x4(%esp)
 b54:	83 ec 0c             	sub    $0xc,%esp
 b57:	89 93 58 00 00 00    	mov    %edx,0x58(%ebx)
 b5d:	50                   	push   %eax
 b5e:	e8 5d f9 ff ff       	call   4c0 <puts@plt>
 b63:	5a                   	pop    %edx
 b64:	59                   	pop    %ecx
 b65:	8b 54 24 0c          	mov    0xc(%esp),%edx
 b69:	52                   	push   %edx
 b6a:	55                   	push   %ebp
 b6b:	e8 92 00 00 00       	call   c02 <context_switch>
 b70:	8d 83 0b df ff ff    	lea    -0x20f5(%ebx),%eax
 b76:	89 04 24             	mov    %eax,(%esp)
 b79:	e8 42 f9 ff ff       	call   4c0 <puts@plt>
 b7e:	83 c4 10             	add    $0x10,%esp
 b81:	8d 83 15 df ff ff    	lea    -0x20eb(%ebx),%eax
 b87:	83 ec 0c             	sub    $0xc,%esp
 b8a:	50                   	push   %eax
 b8b:	e8 30 f9 ff ff       	call   4c0 <puts@plt>
 b90:	8b 83 5c 00 00 00    	mov    0x5c(%ebx),%eax
 b96:	83 c4 10             	add    $0x10,%esp
 b99:	85 c0                	test   %eax,%eax
 b9b:	0f 85 0f ff ff ff    	jne    ab0 <wait_for_all+0x50>
 ba1:	83 c4 1c             	add    $0x1c,%esp
 ba4:	5b                   	pop    %ebx
 ba5:	5e                   	pop    %esi
 ba6:	5f                   	pop    %edi
 ba7:	5d                   	pop    %ebp
 ba8:	c3                   	ret    
 ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 bb0:	89 8b 5c 00 00 00    	mov    %ecx,0x5c(%ebx)
 bb6:	e9 34 ff ff ff       	jmp    aef <wait_for_all+0x8f>
 bbb:	90                   	nop
 bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 bc0:	83 ec 0c             	sub    $0xc,%esp
 bc3:	ff 74 24 18          	pushl  0x18(%esp)
 bc7:	e8 f4 f8 ff ff       	call   4c0 <puts@plt>
 bcc:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 bd3:	e8 d8 f8 ff ff       	call   4b0 <malloc@plt>
 bd8:	83 c4 10             	add    $0x10,%esp
 bdb:	89 83 58 00 00 00    	mov    %eax,0x58(%ebx)
 be1:	e9 d8 fe ff ff       	jmp    abe <wait_for_all+0x5e>
 be6:	8d 83 20 df ff ff    	lea    -0x20e0(%ebx),%eax
 bec:	50                   	push   %eax
 bed:	8d 83 f9 de ff ff    	lea    -0x2107(%ebx),%eax
 bf3:	6a 29                	push   $0x29
 bf5:	50                   	push   %eax
 bf6:	8d 83 02 df ff ff    	lea    -0x20fe(%ebx),%eax
 bfc:	50                   	push   %eax
 bfd:	e8 fe f8 ff ff       	call   500 <__assert_fail@plt>

00000c02 <context_switch>:
 c02:	53                   	push   %ebx
 c03:	56                   	push   %esi
 c04:	57                   	push   %edi
 c05:	55                   	push   %ebp
 c06:	8b 44 24 14          	mov    0x14(%esp),%eax
 c0a:	8b 4c 24 18          	mov    0x18(%esp),%ecx
 c0e:	89 20                	mov    %esp,(%eax)
 c10:	8b 21                	mov    (%ecx),%esp
 c12:	5d                   	pop    %ebp
 c13:	5f                   	pop    %edi
 c14:	5e                   	pop    %esi
 c15:	5b                   	pop    %ebx
 c16:	c3                   	ret    
 c17:	66 90                	xchg   %ax,%ax
 c19:	66 90                	xchg   %ax,%ax
 c1b:	66 90                	xchg   %ax,%ax
 c1d:	66 90                	xchg   %ax,%ax
 c1f:	90                   	nop

00000c20 <foo>:
 c20:	55                   	push   %ebp
 c21:	57                   	push   %edi
 c22:	56                   	push   %esi
 c23:	53                   	push   %ebx
 c24:	e8 b7 fa ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 c29:	81 c3 9b 23 00 00    	add    $0x239b,%ebx
 c2f:	83 ec 3c             	sub    $0x3c,%esp
 c32:	8b 44 24 50          	mov    0x50(%esp),%eax
 c36:	8b 38                	mov    (%eax),%edi
 c38:	8b 83 4c 00 00 00    	mov    0x4c(%ebx),%eax
 c3e:	39 c7                	cmp    %eax,%edi
 c40:	89 7c 24 28          	mov    %edi,0x28(%esp)
 c44:	89 44 24 24          	mov    %eax,0x24(%esp)
 c48:	0f 8f 0e 01 00 00    	jg     d5c <foo+0x13c>
 c4e:	8d 6f 01             	lea    0x1(%edi),%ebp
 c51:	89 e8                	mov    %ebp,%eax
 c53:	89 6c 24 18          	mov    %ebp,0x18(%esp)
 c57:	c1 f8 1f             	sar    $0x1f,%eax
 c5a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 c5e:	89 f8                	mov    %edi,%eax
 c60:	99                   	cltd   
 c61:	83 c0 01             	add    $0x1,%eax
 c64:	89 44 24 10          	mov    %eax,0x10(%esp)
 c68:	8d 83 2c df ff ff    	lea    -0x20d4(%ebx),%eax
 c6e:	83 d2 00             	adc    $0x0,%edx
 c71:	89 54 24 14          	mov    %edx,0x14(%esp)
 c75:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 c79:	eb 2d                	jmp    ca8 <foo+0x88>
 c7b:	90                   	nop
 c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 c80:	e8 cb fb ff ff       	call   850 <thread_yield>
 c85:	8b 83 4c 00 00 00    	mov    0x4c(%ebx),%eax
 c8b:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
 c90:	83 54 24 14 00       	adcl   $0x0,0x14(%esp)
 c95:	39 c5                	cmp    %eax,%ebp
 c97:	89 44 24 24          	mov    %eax,0x24(%esp)
 c9b:	0f 8f bb 00 00 00    	jg     d5c <foo+0x13c>
 ca1:	89 6c 24 28          	mov    %ebp,0x28(%esp)
 ca5:	83 c5 01             	add    $0x1,%ebp
 ca8:	8b 44 24 18          	mov    0x18(%esp),%eax
 cac:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 cb0:	8b b3 44 00 00 00    	mov    0x44(%ebx),%esi
 cb6:	8b bb 48 00 00 00    	mov    0x48(%ebx),%edi
 cbc:	89 c1                	mov    %eax,%ecx
 cbe:	89 d0                	mov    %edx,%eax
 cc0:	0f af c6             	imul   %esi,%eax
 cc3:	0f af cf             	imul   %edi,%ecx
 cc6:	01 c1                	add    %eax,%ecx
 cc8:	8b 44 24 18          	mov    0x18(%esp),%eax
 ccc:	f7 e6                	mul    %esi
 cce:	89 54 24 0c          	mov    %edx,0xc(%esp)
 cd2:	01 4c 24 0c          	add    %ecx,0xc(%esp)
 cd6:	89 44 24 08          	mov    %eax,0x8(%esp)
 cda:	8b 54 24 14          	mov    0x14(%esp),%edx
 cde:	8b 44 24 10          	mov    0x10(%esp),%eax
 ce2:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 ce6:	0f af 54 24 08       	imul   0x8(%esp),%edx
 ceb:	0f af c8             	imul   %eax,%ecx
 cee:	8b 44 24 08          	mov    0x8(%esp),%eax
 cf2:	01 d1                	add    %edx,%ecx
 cf4:	f7 64 24 10          	mull   0x10(%esp)
 cf8:	01 ca                	add    %ecx,%edx
 cfa:	01 83 6c 00 00 00    	add    %eax,0x6c(%ebx)
 d00:	11 93 70 00 00 00    	adc    %edx,0x70(%ebx)
 d06:	83 c6 01             	add    $0x1,%esi
 d09:	83 d7 00             	adc    $0x0,%edi
 d0c:	83 7c 24 24 10       	cmpl   $0x10,0x24(%esp)
 d11:	89 b3 44 00 00 00    	mov    %esi,0x44(%ebx)
 d17:	89 bb 48 00 00 00    	mov    %edi,0x48(%ebx)
 d1d:	0f 8f 5d ff ff ff    	jg     c80 <foo+0x60>
 d23:	ff 74 24 28          	pushl  0x28(%esp)
 d27:	8b 44 24 54          	mov    0x54(%esp),%eax
 d2b:	ff 30                	pushl  (%eax)
 d2d:	ff 74 24 34          	pushl  0x34(%esp)
 d31:	6a 01                	push   $0x1
 d33:	e8 a8 f7 ff ff       	call   4e0 <__printf_chk@plt>
 d38:	e8 13 fb ff ff       	call   850 <thread_yield>
 d3d:	8b 83 4c 00 00 00    	mov    0x4c(%ebx),%eax
 d43:	83 44 24 20 01       	addl   $0x1,0x20(%esp)
 d48:	83 54 24 24 00       	adcl   $0x0,0x24(%esp)
 d4d:	89 44 24 34          	mov    %eax,0x34(%esp)
 d51:	83 c4 10             	add    $0x10,%esp
 d54:	39 c5                	cmp    %eax,%ebp
 d56:	0f 8e 45 ff ff ff    	jle    ca1 <foo+0x81>
 d5c:	e8 4f fc ff ff       	call   9b0 <thread_exit>
 d61:	83 c4 3c             	add    $0x3c,%esp
 d64:	5b                   	pop    %ebx
 d65:	5e                   	pop    %esi
 d66:	5f                   	pop    %edi
 d67:	5d                   	pop    %ebp
 d68:	c3                   	ret    
 d69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00000d70 <bar2>:
 d70:	53                   	push   %ebx
 d71:	e8 6a f9 ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 d76:	81 c3 4e 22 00 00    	add    $0x224e,%ebx
 d7c:	83 ec 10             	sub    $0x10,%esp
 d7f:	8d 83 ec dd ff ff    	lea    -0x2214(%ebx),%eax
 d85:	6a 01                	push   $0x1
 d87:	50                   	push   %eax
 d88:	e8 53 fa ff ff       	call   7e0 <create_thread>
 d8d:	8d 83 cc df ff ff    	lea    -0x2034(%ebx),%eax
 d93:	83 c4 0c             	add    $0xc,%esp
 d96:	ff 74 24 14          	pushl  0x14(%esp)
 d9a:	50                   	push   %eax
 d9b:	6a 01                	push   $0x1
 d9d:	e8 3e f7 ff ff       	call   4e0 <__printf_chk@plt>
 da2:	e8 09 fc ff ff       	call   9b0 <thread_exit>
 da7:	83 c4 18             	add    $0x18,%esp
 daa:	5b                   	pop    %ebx
 dab:	c3                   	ret    
 dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00000db0 <bar1>:
 db0:	56                   	push   %esi
 db1:	53                   	push   %ebx
 db2:	e8 29 f9 ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 db7:	81 c3 0d 22 00 00    	add    $0x220d,%ebx
 dbd:	83 ec 04             	sub    $0x4,%esp
 dc0:	8b 74 24 10          	mov    0x10(%esp),%esi
 dc4:	85 f6                	test   %esi,%esi
 dc6:	74 20                	je     de8 <bar1+0x38>
 dc8:	8d 83 d6 df ff ff    	lea    -0x202a(%ebx),%eax
 dce:	83 ec 04             	sub    $0x4,%esp
 dd1:	56                   	push   %esi
 dd2:	50                   	push   %eax
 dd3:	6a 01                	push   $0x1
 dd5:	e8 06 f7 ff ff       	call   4e0 <__printf_chk@plt>
 dda:	e8 d1 fb ff ff       	call   9b0 <thread_exit>
 ddf:	83 c4 14             	add    $0x14,%esp
 de2:	5b                   	pop    %ebx
 de3:	5e                   	pop    %esi
 de4:	c3                   	ret    
 de5:	8d 76 00             	lea    0x0(%esi),%esi
 de8:	8d 83 ac dd ff ff    	lea    -0x2254(%ebx),%eax
 dee:	83 ec 08             	sub    $0x8,%esp
 df1:	6a 00                	push   $0x0
 df3:	50                   	push   %eax
 df4:	e8 e7 f9 ff ff       	call   7e0 <create_thread>
 df9:	83 c4 10             	add    $0x10,%esp
 dfc:	eb ca                	jmp    dc8 <bar1+0x18>
 dfe:	66 90                	xchg   %ax,%ax

00000e00 <__libc_csu_init>:
 e00:	55                   	push   %ebp
 e01:	57                   	push   %edi
 e02:	56                   	push   %esi
 e03:	53                   	push   %ebx
 e04:	e8 d7 f8 ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 e09:	81 c3 bb 21 00 00    	add    $0x21bb,%ebx
 e0f:	83 ec 0c             	sub    $0xc,%esp
 e12:	8b 6c 24 28          	mov    0x28(%esp),%ebp
 e16:	8d b3 04 ff ff ff    	lea    -0xfc(%ebx),%esi
 e1c:	e8 4b f6 ff ff       	call   46c <_init>
 e21:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
 e27:	29 c6                	sub    %eax,%esi
 e29:	c1 fe 02             	sar    $0x2,%esi
 e2c:	85 f6                	test   %esi,%esi
 e2e:	74 25                	je     e55 <__libc_csu_init+0x55>
 e30:	31 ff                	xor    %edi,%edi
 e32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 e38:	83 ec 04             	sub    $0x4,%esp
 e3b:	55                   	push   %ebp
 e3c:	ff 74 24 2c          	pushl  0x2c(%esp)
 e40:	ff 74 24 2c          	pushl  0x2c(%esp)
 e44:	ff 94 bb 00 ff ff ff 	call   *-0x100(%ebx,%edi,4)
 e4b:	83 c7 01             	add    $0x1,%edi
 e4e:	83 c4 10             	add    $0x10,%esp
 e51:	39 fe                	cmp    %edi,%esi
 e53:	75 e3                	jne    e38 <__libc_csu_init+0x38>
 e55:	83 c4 0c             	add    $0xc,%esp
 e58:	5b                   	pop    %ebx
 e59:	5e                   	pop    %esi
 e5a:	5f                   	pop    %edi
 e5b:	5d                   	pop    %ebp
 e5c:	c3                   	ret    
 e5d:	8d 76 00             	lea    0x0(%esi),%esi

00000e60 <__libc_csu_fini>:
 e60:	f3 c3                	repz ret 
 e62:	66 90                	xchg   %ax,%ax
 e64:	66 90                	xchg   %ax,%ax
 e66:	66 90                	xchg   %ax,%ax
 e68:	66 90                	xchg   %ax,%ax
 e6a:	66 90                	xchg   %ax,%ax
 e6c:	66 90                	xchg   %ax,%ax
 e6e:	66 90                	xchg   %ax,%ax

00000e70 <__stack_chk_fail_local>:
 e70:	53                   	push   %ebx
 e71:	e8 6a f8 ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 e76:	81 c3 4e 21 00 00    	add    $0x214e,%ebx
 e7c:	83 ec 08             	sub    $0x8,%esp
 e7f:	e8 1c f6 ff ff       	call   4a0 <__stack_chk_fail@plt>

Disassembly of section .fini:

00000e84 <_fini>:
 e84:	53                   	push   %ebx
 e85:	83 ec 08             	sub    $0x8,%esp
 e88:	e8 53 f8 ff ff       	call   6e0 <__x86.get_pc_thunk.bx>
 e8d:	81 c3 37 21 00 00    	add    $0x2137,%ebx
 e93:	83 c4 08             	add    $0x8,%esp
 e96:	5b                   	pop    %ebx
 e97:	c3                   	ret    
